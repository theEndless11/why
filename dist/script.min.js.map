{"version":3,"sources":["script.js"],"names":["username","prompt","ably","Ably","Realtime","get","users","messageInput","document","getElementById","sendButton","chatMessages","userList","userStatus","userSelect","message","value","trim","channel","publish","user","text","time","Date","toLocaleTimeString","updateUserList","updateUserStatus","userItem","createElement","textContent","action","concat","selectedUser","to","from","subscribe","msg","msgElement","innerHTML","data","appendChild","scrollTop","scrollHeight","push","filter","initializeUser","sendMessage","addEventListener","e"],"mappings":"aACA,IAAIA,SAAWC,OAAO,wBADtBC,KAAA,IAAAC,KAAAC,SAAA,6DACIJ,QAAQE,KAAGD,SAAOI,IAAA,aAKlBC,MAAQ,GAARA,SAAJ,GAIIC,aAAeC,SAASC,eAAe,iBACvCC,WAAaF,SAASC,eAAe,eACrCE,aAAeH,SAASC,eAAe,iBACvCG,SAAWJ,SAASC,eAAe,aACnCI,WAAaL,SAASC,eAAe,eACrCK,WAAaN,SAASC,eAAe,eAIrC,SAAIM,cAAJ,IAAIA,EAAUR,aAAaS,MAAMC,OACjC,KAAIF,IACAG,QAAQC,QAAQ,UAAW,CAAAC,KAAApB,SAAAqB,KAAAN,EAAAO,MAAA,IAAAC,MAAAC,uBAAEJ,aAAFJ,MAAA,IAyBnC,SAASS,iBALLA,SAAAA,UAAc,GACdC,MAAAA,QAAgB,SAAAN,GAGpB,IAAAO,EAAAnB,SAAAoB,cAAA,MAKQD,EAASE,YAAcT,EAJ/BR,SAASa,YAAiBE,KAKlBf,SAAAA,iBAAqBe,EAArB3B,GAHJ,SAAA8B,EAOJjB,WAAAgB,YAAA,GAAAE,OAAA/B,EAAA,yBAI0B,UAAX8B,IACPjB,WAAWgB,YAAX,GAAAE,OAA4B/B,EAA5B,wBAOJ,SAAIgC,iBACAd,QAAQC,QAAQ,cAAA,CAAhBW,OAAmC,OAAA9B,SAAAA,WAAEiC,MAAID,KAAAA,UAAcE,iBA7C1DhB,QAAAiB,UAAA,UAAA,SAAAC,GAGL,IAAAC,EAAA7B,SAAAoB,cAAA,OAGIS,EAAWC,UAAX,WAAAP,OAAkCK,EAAIG,KAAKnB,KAA3C,eAAAW,OAA6DK,EAAIG,KAAKjB,KAAtE,OAAAS,OAAgFK,EAAIG,KAAKlB,MACzFV,aAAa6B,YAAYH,GAH7BnB,aAAAuB,UAA6B9B,aAAA+B,eAIzB/B,QAAAA,UAAa8B,cAAY9B,SAAAA,GAG7B,SAAAyB,EAAAG,KAAAT,OAGQxB,MAAMqC,KAAKP,EAAIG,KAAKvC,UAFK,UAAzBmC,EAAUI,KAAAT,SACVM,MAASN,MAATc,OAAoB,SAAAxB,GAAxB,OAAgCA,IAAAgB,EAAAG,KAAAvC,YAAhCyB,iBAGInB,iBAAcsC,EAAOL,KAAAT,OAAAV,EAAImB,KAAAvC,YAqBzBa,WAAAA,iBAAA,SAAA,WACH,IAAAmB,EAAAlB,WAAAE,MAGLgB,GAIQd,QAAQC,QAAQ,kBAAmB,CAAEc,GAAID,EAAcE,KAAMlC,SAAUqB,KAAM,gCAEpFwB,iBAIG3B,WAAQC,iBAAQ,QAAe2B,aAAAvC,aAA/BwC,iBAAA,WAAA,SAAAC,GACWhD,UAAL2C,EAAAA,KACNlB","file":"script.min.js","sourcesContent":["// Initialize variables\r\nlet username = prompt(\"Enter your username:\");\r\nlet ably = new Ably.Realtime('knH84g.xyERFQ:_YgFb-hkCXQNM2gCyRhIt2Q0NWuKd2JmfNhLZILR7DE');\r\nlet channel = ably.channels.get('chat-room');\r\n\r\n// Arrays to store users and messages\r\nlet users = [];\r\nlet messages = [];\r\n\r\n// DOM Elements\r\nlet messageInput = document.getElementById('message-input');\r\nlet sendButton = document.getElementById('send-button');\r\nlet chatMessages = document.getElementById('chat-messages');\r\nlet userList = document.getElementById('user-list');\r\nlet userStatus = document.getElementById('user-status');\r\nlet userSelect = document.getElementById('user-select');\r\n\r\n// Send message to channel\r\nfunction sendMessage() {\r\n    let message = messageInput.value.trim();\r\n    if (message !== \"\") {\r\n        channel.publish('message', { user: username, text: message, time: new Date().toLocaleTimeString() });\r\n        messageInput.value = '';\r\n    }\r\n}\r\n\r\n// Handle new messages\r\nchannel.subscribe('message', (msg) => {\r\n    let msgElement = document.createElement('div');\r\n    msgElement.innerHTML = `<strong>${msg.data.user}</strong> [${msg.data.time}]: ${msg.data.text}`;\r\n    chatMessages.appendChild(msgElement);\r\n    chatMessages.scrollTop = chatMessages.scrollHeight; // Scroll to the bottom\r\n});\r\n\r\n// Handle user joining and leaving\r\nchannel.subscribe('user-action', (msg) => {\r\n    if (msg.data.action === 'join') {\r\n        users.push(msg.data.username);\r\n    } else if (msg.data.action === 'leave') {\r\n        users = users.filter(user => user !== msg.data.username);\r\n    }\r\n    updateUserList();\r\n    updateUserStatus(msg.data.action, msg.data.username);\r\n});\r\n\r\n// Update the list of available users\r\nfunction updateUserList() {\r\n    userList.innerHTML = '';\r\n    users.forEach(user => {\r\n        let userItem = document.createElement('li');\r\n        userItem.textContent = user;\r\n        userList.appendChild(userItem);\r\n    });\r\n}\r\n\r\n// Update the user status when someone joins or leaves\r\nfunction updateUserStatus(action, username) {\r\n    if (action === 'join') {\r\n        userStatus.textContent = `${username} has joined the chat.`;\r\n    } else if (action === 'leave') {\r\n        userStatus.textContent = `${username} has left the chat.`;\r\n    }\r\n}\r\n\r\n// Handle private message\r\nuserSelect.addEventListener('change', () => {\r\n    let selectedUser = userSelect.value;\r\n    if (selectedUser) {\r\n        channel.publish('private-message', { to: selectedUser, from: username, text: 'Private message initiated' });\r\n    }\r\n});\r\n\r\n// Initialize the user and notify others of joining\r\nfunction initializeUser() {\r\n    channel.publish('user-action', { action: 'join', username: username });\r\n    users.push(username);\r\n    updateUserList();\r\n}\r\n\r\n// Listen for when a user joins or leaves the chat\r\ninitializeUser();\r\n\r\n// Add event listener to send button\r\nsendButton.addEventListener('click', sendMessage);\r\n\r\n// Add event listener for enter key to send message\r\nmessageInput.addEventListener('keypress', (e) => {\r\n    if (e.key === 'Enter') {\r\n        sendMessage();\r\n    }\r\n});\r\n"]}