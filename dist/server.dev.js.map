{"version":3,"sources":["server.js"],"names":["express","require","mongoose","bodyParser","cors","multer","dotenv","path","config","app","port","process","env","PORT","use","json","storage","diskStorage","destination","req","file","cb","filename","Date","now","originalname","upload","join","__dirname","connect","MONGODB_URI","useNewUrlParser","useUnifiedTopology","then","console","log","err","User","model","Schema","username","type","String","required","unique","status","Message","user","text","time","isPrivate","Boolean","toUser","post","res","body","save","send","message","error","get","find","users","single","query","$or","sort","messages","listen"],"mappings":"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","sourcesContent":["const express = require('express');\r\nconst mongoose = require('mongoose');\r\nconst bodyParser = require('body-parser');\r\nconst cors = require('cors');\r\nconst multer = require('multer');\r\nconst dotenv = require('dotenv');\r\nconst path = require('path');\r\n\r\n// Load environment variables from .env file\r\ndotenv.config();\r\n\r\nconst app = express();\r\nconst port = process.env.PORT || 3000;\r\n\r\n// Middleware\r\napp.use(cors());\r\napp.use(bodyParser.json());\r\n\r\n// Set up file upload (for media files like images/videos)\r\nconst storage = multer.diskStorage({\r\n  destination: (req, file, cb) => {\r\n    cb(null, 'uploads/');\r\n  },\r\n  filename: (req, file, cb) => {\r\n    cb(null, Date.now() + '-' + file.originalname);\r\n  }\r\n});\r\nconst upload = multer({ storage });\r\n\r\n// Serve static files (HTML, CSS, JS) from the 'public' directory\r\napp.use(express.static(path.join(__dirname, 'public')));\r\n\r\n// MongoDB Connection\r\nmongoose.connect(process.env.MONGODB_URI, { useNewUrlParser: true, useUnifiedTopology: true })\r\n  .then(() => console.log('MongoDB connected'))\r\n  .catch((err) => console.log('Error connecting to MongoDB:', err));\r\n\r\n// Define Mongoose Models\r\nconst User = mongoose.model('User', new mongoose.Schema({\r\n  username: { type: String, required: true, unique: true },\r\n  status: { type: String, default: 'active' },\r\n}));\r\n\r\nconst Message = mongoose.model('Message', new mongoose.Schema({\r\n  user: { type: String, required: true },\r\n  text: { type: String },\r\n  file: { type: String }, // URL to the file\r\n  time: { type: Date, default: Date.now },\r\n  isPrivate: { type: Boolean, default: false },\r\n  toUser: { type: String }, // Private message recipient\r\n}));\r\n\r\n// Routes\r\n\r\n// Route for registration\r\napp.post('/register', async (req, res) => {\r\n  const { username } = req.body;\r\n  try {\r\n    const user = new User({ username });\r\n    await user.save();\r\n    res.status(200).send({ message: 'User registered successfully!' });\r\n  } catch (error) {\r\n    res.status(400).send({ message: 'Error registering user', error });\r\n  }\r\n});\r\n\r\n// Route to get all active users\r\napp.get('/users', async (req, res) => {\r\n  try {\r\n    const users = await User.find({ status: 'active' });\r\n    res.json(users);\r\n  } catch (error) {\r\n    res.status(500).send({ message: 'Error fetching users', error });\r\n  }\r\n});\r\n\r\n// Route to send a message (public or private)\r\napp.post('/send-message', upload.single('file'), async (req, res) => {\r\n  const { user, text, toUser, isPrivate } = req.body;\r\n  const file = req.file ? `/uploads/${req.file.filename}` : null;\r\n\r\n  try {\r\n    const message = new Message({\r\n      user,\r\n      text,\r\n      file,\r\n      isPrivate,\r\n      toUser,\r\n    });\r\n\r\n    await message.save();\r\n    res.status(200).send({ message: 'Message sent successfully!' });\r\n  } catch (error) {\r\n    res.status(500).send({ message: 'Error sending message', error });\r\n  }\r\n});\r\n\r\n// Route to get all messages (or filtered messages based on user)\r\napp.get('/messages', async (req, res) => {\r\n  const { username } = req.query; // We can pass the `username` as a query parameter to filter messages\r\n\r\n  try {\r\n    let messages;\r\n\r\n    if (username) {\r\n      // If a username is provided, filter messages for that user (both public and private)\r\n      messages = await Message.find({\r\n        $or: [{ isPrivate: false }, { toUser: username }],\r\n      }).sort({ time: 1 });\r\n    } else {\r\n      // If no username is provided, return all messages (for admin or public view)\r\n      messages = await Message.find().sort({ time: 1 });\r\n    }\r\n\r\n    res.json(messages);\r\n  } catch (error) {\r\n    res.status(500).send({ message: 'Error fetching messages', error });\r\n  }\r\n});\r\n\r\n// Serve media files (images/videos)\r\napp.use('/uploads', express.static(path.join(__dirname, 'uploads')));\r\n\r\n// Start the server\r\napp.listen(port, () => {\r\n  console.log(`Server running on port ${port}`);\r\n});\r\n\r\n"],"file":"server.dev.js"}