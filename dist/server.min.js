"use strict";var express=require("express"),mongoose=require("mongoose"),bodyParser=require("body-parser"),cors=require("cors"),multer=require("multer"),dotenv=require("dotenv"),path=require("path");dotenv.config();var app=express(),port=process.env.PORT||3e3;app.use(cors()),app.use(bodyParser.json());var storage=multer.diskStorage({destination:function(e,r,s){s(null,"uploads/")},filename:function(e,r,s){s(null,Date.now()+"-"+r.originalname)}}),upload=multer({storage:storage});app.use(express.static(path.join(__dirname,"public"))),mongoose.connect(process.env.MONGODB_URI,{useNewUrlParser:!0,useUnifiedTopology:!0}).then(function(){return console.log("MongoDB connected")}).catch(function(e){return console.log("Error connecting to MongoDB:",e)});var User=mongoose.model("User",new mongoose.Schema({username:{type:String,required:!0,unique:!0},status:{type:String,default:"active"}})),Message=mongoose.model("Message",new mongoose.Schema({user:{type:String,required:!0},text:{type:String},file:{type:String},time:{type:Date,default:Date.now},isPrivate:{type:Boolean,default:!1},toUser:{type:String}}));app.post("/register",function(r,s){var t,n;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return t=r.body.username,e.prev=1,n=new User({username:t}),e.next=5,regeneratorRuntime.awrap(n.save());case 5:s.status(200).send({message:"User registered successfully!"}),e.next=11;break;case 8:e.prev=8,e.t0=e.catch(1),s.status(400).send({message:"Error registering user",error:e.t0});case 11:case"end":return e.stop()}},null,null,[[1,8]])}),app.get("/users",function(e,r){var s;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,regeneratorRuntime.awrap(User.find({status:"active"}));case 3:s=e.sent,r.json(s),e.next=10;break;case 7:e.prev=7,e.t0=e.catch(0),r.status(500).send({message:"Error fetching users",error:e.t0});case 10:case"end":return e.stop()}},null,null,[[0,7]])}),app.post("/send-message",upload.single("file"),function(r,s){var t,n,a,o,u,i,c;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return t=r.body,n=t.user,a=t.text,o=t.toUser,u=t.isPrivate,i=r.file?"/uploads/".concat(r.file.filename):null,e.prev=2,c=new Message({user:n,text:a,file:i,isPrivate:u,toUser:o}),e.next=6,regeneratorRuntime.awrap(c.save());case 6:s.status(200).send({message:"Message sent successfully!"}),e.next=12;break;case 9:e.prev=9,e.t0=e.catch(2),s.status(500).send({message:"Error sending message",error:e.t0});case 12:case"end":return e.stop()}},null,null,[[2,9]])}),app.get("/messages",function(r,s){var t,n;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:if(t=r.query.username,e.prev=1,t)return e.next=5,regeneratorRuntime.awrap(Message.find({$or:[{isPrivate:!1},{toUser:t}]}).sort({time:1}));e.next=8;break;case 5:n=e.sent,e.next=11;break;case 8:return e.next=10,regeneratorRuntime.awrap(Message.find().sort({time:1}));case 10:n=e.sent;case 11:s.json(n),e.next=17;break;case 14:e.prev=14,e.t0=e.catch(1),s.status(500).send({message:"Error fetching messages",error:e.t0});case 17:case"end":return e.stop()}},null,null,[[1,14]])}),app.use("/uploads",express.static(path.join(__dirname,"uploads"))),app.listen(port,function(){console.log("Server running on port ".concat(port))});
//# sourceMappingURL=server.min.js.map
