{"version":3,"sources":["server.js"],"names":["express","require","mongoose","cors","dotenv","bodyParser","config","app","env","PORT","use","json","port","process","destination","req","file","cb","filename","storage","Date","multer","diskStorage","originalname","upload","path","join","__dirname","connect","then","console","log","err","MONGODB_URI","Schema","useNewUrlParser","String","required","unique","useUnifiedTopology","default","Message","model","user","text","type","time","now","username","Boolean","post","res","regeneratorRuntime","async","_context","prev","next","body","awrap","save","status","send","message","t0","error","stop","User","find","users","single","_req$body","toUser","isPrivate","_context3","get","messages","_context4","query","$or","sort","sent","listen","concat"],"mappings":"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","file":"server.min.js","sourcesContent":["const express = require('express');\r\nconst mongoose = require('mongoose');\r\nconst bodyParser = require('body-parser');\r\nconst cors = require('cors');\r\nconst multer = require('multer');\r\nconst dotenv = require('dotenv');\r\nconst path = require('path');\r\n\r\n// Load environment variables from .env file\r\ndotenv.config();\r\n\r\nconst app = express();\r\nconst port = process.env.PORT || 3000;\r\n\r\n// Middleware\r\napp.use(cors());\r\napp.use(bodyParser.json());\r\n\r\n// Set up file upload (for media files like images/videos)\r\nconst storage = multer.diskStorage({\r\n  destination: (req, file, cb) => {\r\n    cb(null, 'uploads/');\r\n  },\r\n  filename: (req, file, cb) => {\r\n    cb(null, Date.now() + '-' + file.originalname);\r\n  }\r\n});\r\nconst upload = multer({ storage });\r\n\r\n// Serve static files (HTML, CSS, JS) from the 'public' directory\r\napp.use(express.static(path.join(__dirname, 'public')));\r\n\r\n// MongoDB Connection\r\nmongoose.connect(process.env.MONGODB_URI, { useNewUrlParser: true, useUnifiedTopology: true })\r\n  .then(() => console.log('MongoDB connected'))\r\n  .catch((err) => console.log('Error connecting to MongoDB:', err));\r\n\r\n// Define Mongoose Models\r\nconst User = mongoose.model('User', new mongoose.Schema({\r\n  username: { type: String, required: true, unique: true },\r\n  status: { type: String, default: 'active' },\r\n}));\r\n\r\nconst Message = mongoose.model('Message', new mongoose.Schema({\r\n  user: { type: String, required: true },\r\n  text: { type: String },\r\n  file: { type: String }, // URL to the file\r\n  time: { type: Date, default: Date.now },\r\n  isPrivate: { type: Boolean, default: false },\r\n  toUser: { type: String }, // Private message recipient\r\n}));\r\n\r\n// Routes\r\n\r\n// Route for registration\r\napp.post('/register', async (req, res) => {\r\n  const { username } = req.body;\r\n  try {\r\n    const user = new User({ username });\r\n    await user.save();\r\n    res.status(200).send({ message: 'User registered successfully!' });\r\n  } catch (error) {\r\n    res.status(400).send({ message: 'Error registering user', error });\r\n  }\r\n});\r\n\r\n// Route to get all active users\r\napp.get('/users', async (req, res) => {\r\n  try {\r\n    const users = await User.find({ status: 'active' });\r\n    res.json(users);\r\n  } catch (error) {\r\n    res.status(500).send({ message: 'Error fetching users', error });\r\n  }\r\n});\r\n\r\n// Route to send a message (public or private)\r\napp.post('/send-message', upload.single('file'), async (req, res) => {\r\n  const { user, text, toUser, isPrivate } = req.body;\r\n  const file = req.file ? `/uploads/${req.file.filename}` : null;\r\n\r\n  try {\r\n    const message = new Message({\r\n      user,\r\n      text,\r\n      file,\r\n      isPrivate,\r\n      toUser,\r\n    });\r\n\r\n    await message.save();\r\n    res.status(200).send({ message: 'Message sent successfully!' });\r\n  } catch (error) {\r\n    res.status(500).send({ message: 'Error sending message', error });\r\n  }\r\n});\r\n\r\n// Route to get all messages (or filtered messages based on user)\r\napp.get('/messages', async (req, res) => {\r\n  const { username } = req.query; // We can pass the `username` as a query parameter to filter messages\r\n\r\n  try {\r\n    let messages;\r\n\r\n    if (username) {\r\n      // If a username is provided, filter messages for that user (both public and private)\r\n      messages = await Message.find({\r\n        $or: [{ isPrivate: false }, { toUser: username }],\r\n      }).sort({ time: 1 });\r\n    } else {\r\n      // If no username is provided, return all messages (for admin or public view)\r\n      messages = await Message.find().sort({ time: 1 });\r\n    }\r\n\r\n    res.json(messages);\r\n  } catch (error) {\r\n    res.status(500).send({ message: 'Error fetching messages', error });\r\n  }\r\n});\r\n\r\n// Serve media files (images/videos)\r\napp.use('/uploads', express.static(path.join(__dirname, 'uploads')));\r\n\r\n// Start the server\r\napp.listen(port, () => {\r\n  console.log(`Server running on port ${port}`);\r\n});\r\n\r\n"]}